/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package az.JDBC.library.gui;

import Model.Author;
import Model.Book;
import Model.Employee;
import Model.Genre;
import Model.Info;
import Model.Rent;
import Model.User;
import az.JDBC.library.service.AuthorService;
import az.JDBC.library.service.BookService;
import az.JDBC.library.service.EmployeeService;
import az.JDBC.library.service.GenreService;
import az.JDBC.library.service.InfoService;
import az.JDBC.library.service.RentService;
import az.JDBC.library.service.UserService;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Burhan99
 */
public class MainFrame extends javax.swing.JFrame {

    private BookService bookService;
    private AuthorService authorService;
    private GenreService genreService;
    private EmployeeService employeeService;
    private UserService userService;
    private RentService rentService;
    private InfoService infoService;
    private String gloBtnName = "";

    /**
     * Creates new form MainFrame
     */
    public MainFrame(BookService bookService, AuthorService authorService, GenreService genreService, EmployeeService employeeService, UserService userService, RentService rentService, InfoService infoService) {
        initComponents();
        this.bookService = bookService;
        this.authorService = authorService;
        this.genreService = genreService;
        this.employeeService = employeeService;
        this.userService = userService;
        this.rentService = rentService;
        this.infoService = infoService;
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        saleBtn.setVisible(false);
        infoBtn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        bookBtn = new javax.swing.JButton();
        authorBtn = new javax.swing.JButton();
        genreBtn = new javax.swing.JButton();
        employeeBtn = new javax.swing.JButton();
        userBtn = new javax.swing.JButton();
        rentBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        keywordTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        infoBtn = new javax.swing.JButton();
        saleBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel5.setBackground(new java.awt.Color(55, 55, 55));

        bookBtn.setBackground(new java.awt.Color(255, 204, 102));
        bookBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        bookBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\open-book.png")); // NOI18N
        bookBtn.setText("Book");
        bookBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        authorBtn.setBackground(new java.awt.Color(255, 204, 102));
        authorBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        authorBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\author.png")); // NOI18N
        authorBtn.setText("Author");
        authorBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        authorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorBtnActionPerformed(evt);
            }
        });

        genreBtn.setBackground(new java.awt.Color(255, 204, 102));
        genreBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        genreBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\genre2.png")); // NOI18N
        genreBtn.setText("Genre");
        genreBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        genreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreBtnActionPerformed(evt);
            }
        });

        employeeBtn.setBackground(new java.awt.Color(255, 204, 102));
        employeeBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\employee.jpg")); // NOI18N
        employeeBtn.setText("Employee");
        employeeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        employeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeBtnActionPerformed(evt);
            }
        });

        userBtn.setBackground(new java.awt.Color(255, 204, 102));
        userBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        userBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\user.png")); // NOI18N
        userBtn.setText("User");
        userBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        userBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userBtnActionPerformed(evt);
            }
        });

        rentBtn.setBackground(new java.awt.Color(255, 204, 102));
        rentBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\rent.png")); // NOI18N
        rentBtn.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        rentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\B-library(2.1).png")); // NOI18N
        jLabel1.setText("jLabel1");

        keywordTxt.setBackground(new java.awt.Color(255, 252, 207));
        keywordTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordTxtActionPerformed(evt);
            }
        });
        keywordTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keywordTxtKeyReleased(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(255, 204, 102));
        searchBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        searchBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\search.png")); // NOI18N
        searchBtn.setText("Search");
        searchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        searchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(255, 204, 102));
        logoutBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        logoutBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\exit.png")); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(bookBtn)
                        .addGap(62, 62, 62)
                        .addComponent(authorBtn)
                        .addGap(57, 57, 57)
                        .addComponent(genreBtn)
                        .addGap(63, 63, 63)
                        .addComponent(employeeBtn)
                        .addGap(72, 72, 72)
                        .addComponent(userBtn)
                        .addGap(66, 66, 66)
                        .addComponent(rentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 223, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logoutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(authorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(genreBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(55, 55, 55));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        addBtn.setBackground(new java.awt.Color(255, 204, 102));
        addBtn.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        addBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\add.png")); // NOI18N
        addBtn.setText("Add");
        addBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 204, 102));
        deleteBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\trash.png")); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 204, 102));
        editBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        editBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\edit.png")); // NOI18N
        editBtn.setText("Edit");
        editBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        infoBtn.setBackground(new java.awt.Color(255, 204, 102));
        infoBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        infoBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\information.png")); // NOI18N
        infoBtn.setText("Info");
        infoBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        infoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoBtnActionPerformed(evt);
            }
        });

        saleBtn.setBackground(new java.awt.Color(255, 204, 102));
        saleBtn.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        saleBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\burha\\OneDrive\\İş masası\\Java\\B-Library\\money.png")); // NOI18N
        saleBtn.setText("Sale");
        saleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        saleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn)
                    .addComponent(infoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(infoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1025, Short.MAX_VALUE))
        );

        jScrollPane2.setEnabled(false);
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(255, 255, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        switch (gloBtnName) {
            case "book":
                NewBookFrame newBookFrame = new NewBookFrame(bookService);
                newBookFrame.setVisible(true);
                break;
            case "author":
                NewAuthorFrame newAuthorFrame = new NewAuthorFrame(authorService);
                newAuthorFrame.setVisible(true);
                break;
            case "genre":
                NewGenreFrame newGenreFrame = new NewGenreFrame(genreService);
                newGenreFrame.setVisible(true);
                break;
            case "employee":
                NewEmployeeFrame newEmployeeFrame = new NewEmployeeFrame(employeeService);
                newEmployeeFrame.setVisible(true);
                break;
            case "user":
                NewUserFrame newUserFrame = new NewUserFrame(userService);
                newUserFrame.setVisible(true);

                break;
            case "rent":
                NewRentFrame newRentFrame = new NewRentFrame(bookService, authorService, rentService, userService, employeeService);
                newRentFrame.setVisible(true);
                break;
            case "info":
                NewInfoFrame newInfoFrame = new NewInfoFrame(bookService, authorService, genreService);
                newInfoFrame.setVisible(true);
                break;

            default:
                JOptionPane.showMessageDialog(null, "Please,Select menu!");
        }

    }//GEN-LAST:event_addBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int rowIndex = jTable1.getSelectedRow();

        try {
            if (rowIndex != -1) {
                Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);

                switch (gloBtnName) {

                    case "book":
                        int isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Book", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            bookService.deleteBook(selectedId);
                            JOptionPane.showMessageDialog(null, "Book is deleted!");
                            showBookData(bookService.getBookList());
                        }

                        break;
                    case "author":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Author", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            authorService.deleteAuthor(selectedId);
                            JOptionPane.showMessageDialog(null, "Author is deleted!");
                            showAuthorData(authorService.getAuthorList());
                        }
                        break;
                    case "genre":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Genre", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            genreService.deleteGenre(selectedId);
                            JOptionPane.showMessageDialog(null, "Genre is deleted!");
                            showGenreData(genreService.getGenreList());
                        }
                        break;
                    case "employee":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Employee", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            employeeService.deleteEmployee(selectedId);
                            JOptionPane.showMessageDialog(null, "Employee is deleted!");
                            showEmployeeData(employeeService.getEmployeeList());
                        }
                        break;
                    case "user":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete User", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            userService.deleteUser(selectedId);
                            JOptionPane.showMessageDialog(null, "User is deleted!");
                            showUserData(userService.getUserList());
                        }

                        break;
                    case "rent":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Rent", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            rentService.deleteRent(selectedId);
                            JOptionPane.showMessageDialog(null, "Rent is deleted!");
                            showRentData(rentService.getRentList());
                        }
                        break;
                    case "info":
                        isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete Info", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            infoService.deleteInfo(selectedId);
                            JOptionPane.showMessageDialog(null, "Info is deleted!");
                        }

                    default:
                        JOptionPane.showMessageDialog(null, "Please,Select menu!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please,Select menu!");

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        if (rowIndex != -1) {
            Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);

            switch (gloBtnName) {

                case "book":
                    EditBookFrame editBookFrame = new EditBookFrame(bookService, selectedId);
                    editBookFrame.setVisible(true);
                    break;
                case "author":
                    EditAuthorFrame editAuthorFrame = new EditAuthorFrame(authorService, selectedId);
                    editAuthorFrame.setVisible(true);
                    break;
                case "genre":
                    EditGenreFrame editGenreFrame = new EditGenreFrame(genreService, selectedId);
                    editGenreFrame.setVisible(true);
                    break;
                case "employee":
                    EditEmployeeFrame editEmployeeFrame = new EditEmployeeFrame(employeeService, selectedId);
                    editEmployeeFrame.setVisible(true);
                    break;
                case "user":
                    EditUserFrame editUserFrame = new EditUserFrame(userService, selectedId);
                    editUserFrame.setVisible(true);

                    break;
                case "rent":
                    EditRentFrame editRentFrame = new EditRentFrame(rentService, bookService, authorService, userService, employeeService, selectedId);
                    editRentFrame.setVisible(true);
                    break;
                case "info":
                    EditInfoFrame editInfoFrame = new EditInfoFrame(bookService, genreService, authorService, infoService, selectedId);
                    editInfoFrame.setVisible(true);
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "Please,Select menu!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please,Select menu!");

        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void infoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoBtnActionPerformed

        int rowIndex = jTable1.getSelectedRow();
        if (rowIndex != -1) {
            switch (gloBtnName) {

                case "book":
                    Long bookId = (Long) jTable1.getValueAt(rowIndex, 0);
                    try {

                        List<Info> infoBook = infoService.getBookInfoById(bookId);

                        DefaultTableModel model = new DefaultTableModel() {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false;
                            }

                        };
                        jTable1.setModel(model);
                        model.addColumn("#");
                        model.addColumn("Book");
                        model.addColumn("Genre");
                        model.addColumn("Author");
                        model.addColumn("Page");
                        for (Info info : infoBook) {
                            Object[] data = new Object[]{
                                info.getId(), info.getBook(), info.getGenre(), info.getAuthor(), info.getBook().getPage()
                            };

                            model.addRow(data);
                        }

                        model.fireTableDataChanged();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    break;
                case "author":
                    Long authorId = (Long) jTable1.getValueAt(rowIndex, 0);
                    try {
                        List<Info> infoAuthor = infoService.getAuthorInfoById(authorId);
                        DefaultTableModel model = new DefaultTableModel() {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false;
                            }

                        };
                        jTable1.setModel(model);
                        model.addColumn("#");
                        model.addColumn("Author");
                        model.addColumn("Book");
                        model.addColumn("Genre");
                        model.addColumn("Page");
                        for (Info info : infoAuthor) {
                            Object[] data = new Object[]{
                                info.getId(), info.getAuthor(), info.getBook(), info.getGenre(), info.getBook().getPage()

                            };
                            model.addRow(data);
                        }
                        model.fireTableDataChanged();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                    break;
                case "genre":
                    Long genreId = (Long) jTable1.getValueAt(rowIndex, 0);
                    try {
                        List<Info> infoGenre = infoService.getGenreInfoById(genreId);
                        DefaultTableModel model = new DefaultTableModel() {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false;
                            }

                        };
                        jTable1.setModel(model);
                        model.addColumn("Genre");
                        model.addColumn("Book");
                        model.addColumn("Author");
                        model.addColumn("Page");
                        for (Info info : infoGenre) {
                            Object[] data = new Object[]{
                                info.getId(), info.getGenre(), info.getBook(), info.getAuthor(), info.getBook().getPage()
                            };
                            model.addRow(data);
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    break;

            }

        }
        gloBtnName = "info";
    }//GEN-LAST:event_infoBtnActionPerformed

    private void saleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleBtnActionPerformed
        try {
            Long selectedId = null;

            int rowIndex = jTable1.getSelectedRow();
            if (rowIndex != -1) {
                selectedId = (Long) jTable1.getValueAt(rowIndex, 0);
            }
            Book book = bookService.getBookById(selectedId);
            SaleFrame saleFrame = new SaleFrame(bookService, selectedId, book.getSalePrice());
            saleFrame.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saleBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        try {
            String keyword = keywordTxt.getText();

            switch (gloBtnName) {
                case "book":
                    List<Book> bookList = bookService.searchBook(keyword);
                    showBookData(bookList);

                    break;
                case "author":
                    List<Author> authorList = authorService.searchAuthor(keyword);
                    showAuthorData(authorList);

                    break;
                case "genre":
                    List<Genre> genreList = genreService.searchGenre(keyword);
                    showGenreData(genreList);
                    break;
                case "employee":
                    List<Employee> employeeList = employeeService.searchEmployee(keyword);
                    showEmployeeData(employeeList);
                    break;
                case "user":
                    List<User> userList = userService.searchUser(keyword);
                    showUserData(userList);
                    break;
                case "rent":
                    List<Rent> rentList = rentService.searchRent(keyword);
                    showRentData(rentList);
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "Please,Select menu!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void keywordTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordTxtKeyReleased
        searchBtnActionPerformed(null);
    }//GEN-LAST:event_keywordTxtKeyReleased

    private void keywordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordTxtActionPerformed

    private void rentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentBtnActionPerformed
        try {
            showRentData(rentService.getRentList());
            gloBtnName = "rent";
            saleBtn.setVisible(false);
            infoBtn.setVisible(false);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_rentBtnActionPerformed

    private void userBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userBtnActionPerformed
        try {
            showUserData(userService.getUserList());
            gloBtnName = "user";
            saleBtn.setVisible(false);
            infoBtn.setVisible(false);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_userBtnActionPerformed

    private void employeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeBtnActionPerformed
        try {
            showEmployeeData(employeeService.getEmployeeList());
            gloBtnName = "employee";
            saleBtn.setVisible(false);
            infoBtn.setVisible(false);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_employeeBtnActionPerformed

    private void genreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreBtnActionPerformed
        try {
            showGenreData(genreService.getGenreList());
            gloBtnName = "genre";
            infoBtn.setVisible(true);
            saleBtn.setVisible(false);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_genreBtnActionPerformed

    private void authorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorBtnActionPerformed
        try {
            showAuthorData(authorService.getAuthorList());
            gloBtnName = "author";
            saleBtn.setVisible(false);
            infoBtn.setVisible(true);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_authorBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        try {
            showBookData(bookService.getBookList());
            gloBtnName = "book";
            saleBtn.setVisible(true);
            infoBtn.setVisible(true);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bookBtnActionPerformed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked

    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            editBtnActionPerformed(null);
        }    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton authorBtn;
    private javax.swing.JButton bookBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton employeeBtn;
    private javax.swing.JButton genreBtn;
    private javax.swing.JButton infoBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField keywordTxt;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton rentBtn;
    private javax.swing.JButton saleBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton userBtn;
    // End of variables declaration//GEN-END:variables

    public void showBookData(List<Book> bookList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Name");
            model.addColumn("Page");
            model.addColumn("Purchase Price");
            model.addColumn("Sale Price");
            model.addColumn("Profit");
            model.addColumn("Stock");
            for (Book book : bookList) {
                Object[] data = new Object[]{
                    book.getId(), book.getName(), book.getPage(), book.getPurchasePrice(), book.getSalePrice(), book.getProfit(), book.getStock()
                };
                model.addRow(data);

            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showAuthorData(List<Author> authorList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Fullname");
            for (Author author : authorList) {
                Object[] data = new Object[]{
                    author.getId(), author.getFullName()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showGenreData(List<Genre> genreList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;

                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Name");
            for (Genre genre : genreList) {
                Object[] data = new Object[]{
                    genre.getId(), genre.getName()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {

            ex.printStackTrace();
        }

    }

    private void showEmployeeData(List<Employee> employeeList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;

                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Birthday");
            model.addColumn("Position");
            model.addColumn("Salary");
            model.addColumn("Identity No:");
            model.addColumn("Telephone");
            model.addColumn("E-mail");
            model.addColumn("Recruitment");
            model.addColumn("Dismissal");
            for (Employee employee : employeeList) {
                Object[] data = new Object[]{
                    employee.getId(), employee.getName(), employee.getSurname(), employee.getGender(), employee.getBirthday(), employee.getPosition(), employee.getSalary(), employee.getIdendity_No(),
                    employee.getTelephone(), employee.getE_mail(), employee.getRecruitment(), employee.getDismissal()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }

    private void showUserData(List<User> userList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Identity No:");
            model.addColumn("E-mail");
            model.addColumn("Telephone");
            for (User user : userList) {
                Object[] data = new Object[]{
                    user.getId(), user.getName(), user.getSurname(), user.getGender(), user.getIdentity_No(), user.getE_mail(), user.getTelephone()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showRentData(List<Rent> rentList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("#");
            model.addColumn("Book");
            model.addColumn("Author");
            model.addColumn("Reader Name");
            model.addColumn("Reader Surname");
            model.addColumn("Reader Telephone");
            model.addColumn("Courier Name");
            model.addColumn("Courier Surname");
            model.addColumn("Payment");
            model.addColumn("Take time");
            model.addColumn("Return time");
            for (Rent rent : rentList) {

                Object[] data = new Object[]{
                    rent.getId(), rent.getBook().getName(), rent.getAuthor().getFullName(), rent.getUser().getName(), rent.getUser().getSurname(), rent.getUser().getTelephone(),
                    rent.getEmployee().getName(), rent.getEmployee().getSurname(), rent.getPayment(), rent.getTakeTime(), rent.getReturnTime()

                };
                model.addRow(data);

            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
